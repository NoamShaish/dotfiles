#!/bin/bash

print_brew_content() {
  echo -e "
Installed Homebrew Packages:
----------------------------"
  brew leaves

  echo -e "
Installed Homebrew Casks:
-------------------------"
  brew list --cask
}

##############################################
#                 Utilities
##############################################
# Create a new directory and cd into it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  # shellcheck disable=SC2199
  if [[ -n "$@" ]]; then
    du ${arg} -- "$@"
  else
    du ${arg} -- .[^.]* *
  fi
}

# bkr ./some_script.sh # some_script.sh is now running in the background
bkr() {
  (nohup "$@" &>/dev/null &)
}

##############################################
#                   IDEs
##############################################
kill_intellij() {
  local pid=$(ps -ef | grep -v grep | grep idea | awk '{print $2}')

  if [[ ! -z ${pid} ]]; then
    echo "Killing idea process ${pid}..."
    kill -9 $(ps -ef | grep -v grep | grep idea | awk '{print $2}')
  else
    echo "Idea is not running."
  fi

  echo "\n  Done.\n"
}

##############################################
#                  DOCKER
##############################################
docker_remove_dangling_intermediate_images() {
  #  local danglingImages=$(docker images | grep "<none>" | awk {'print $3'})
  local danglingImages=$(docker images -f "dangling=true" -q)
  if [[ ! -z "${danglingImages}" ]]; then
    echo "Removing dangling intermediate <none> images..."
    docker rmi -f ${danglingImages}
  fi
}

docker_remove_stopped_containers() {
  docker container prune -f
}

gen_pass() {
  WORDS=4; 
  DELEM=$(shuf -e '!' '@' '#' '$' '%' '^' '&' '*' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '0' | tr -d "\n") ;
  LC_ALL=C grep -x '[a-z]*' /usr/share/dict/words | shuf --random-source=/dev/urandom -n ${WORDS} | paste -s -d ${DELEM} -
}

proxy_on() {
  export proxy=http://127.0.0.1:3128
  export http_proxy=$proxy_url
  export https_proxy=$http_proxy
  export HTTP_PROXY=$http_proxy
  export HTTPS_PROXY=$http_proxy
  export no_proxy=localhost,127.0.0.0,127.0.1.1,127.0.1.1,local.home,10.6.15.99,aws.cloud.bmw,.bmwgroup.net,.muc,azure.cloud.bmw
}