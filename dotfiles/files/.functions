#!/bin/bash

reload_dot_files() {
  curr=${PWD}
  cd ${HOME}
  source ./.functions
  _reload_dot_files_inner
  cd ${curr}
  unset curr
}

# Order is important
declare -a DOT_FILES_TO_LOAD=(".exports"
  ".path"
  ".aliases"
  ".functions")

_reload_dot_files_inner() {
  for file in "${DOT_FILES_TO_LOAD[@]}"; do
    if [[ -r "$file" ]] && [[ -f "$file" ]]; then
      #      echo "${HOME}/${file}"
      source ${HOME}/${file}
    fi
  done
  #  echo "Successfully loaded the following .dotfiles: ${DOT_FILES_TO_LOAD}"
  unset DOT_FILES_TO_LOAD
  _reload_transient_files
}

_reload_transient_files() {
  for file in $(find ${DOT_FILES}/dotfiles/transient -name ".*"); do
    source ${file}
  done
}

print_brew_content() {
  echo -e "
Installed Homebrew Packages:
----------------------------"
  brew leaves

  echo -e "
Installed Homebrew Casks:
-------------------------"
  brew cask list
}

##############################################
#                  SYSTEM
##############################################
# Create a new directory and enter it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  # shellcheck disable=SC2199
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# bkr ./some_script.sh # some_script.sh is now running in the background
bkr() {
  (nohup "$@" &>/dev/null &)
}

##############################################
#                   IDEs
##############################################
kill_intellij() {
  local pid=$(ps -ef | grep -v grep | grep idea | awk '{print $2}')

  if [[ ! -z ${pid} ]]; then
    echo "Killing idea process ${pid}..."
    kill -9 $(ps -ef | grep -v grep | grep idea | awk '{print $2}')
  else
    echo "Idea is not running."
  fi

  echo "\n  Done.\n"
}

##############################################
#                TERRAFORM
##############################################
load_terraform_provider_spotinst() {
  local providerFilename="terraform-provider-spotinst_v0.12.0"
  local providerBuildPath="${GOPATH}/src/github.com/terraform-providers/terraform-provider-spotinst"
  local providerPath=${TERRAFORM_FILES}/internals/.terraform.d/plugins/darwin_amd64

  cur=$(pwd)
  cd ${providerBuildPath}

  make fmt
  go build -o ${providerFilename}
  sudo chmod +x ${providerFilename}
  sudo mv ${providerFilename} ${providerPath}

  echo -e "
Built and copied latest spotinst-terraform-provider:
  Name..........: ${providerFilename}
  Build Source..: ${providerBuildPath}
  Destination...: ${providerPath}
"

  cd ${cur}
}

test_terraform_provider_spotinst() {
  local test_name=$1
  local test_args=""
  local providerBuildPath="${GOPATH}/src/github.com/terraform-providers/terraform-provider-spotinst"

  cur=$(pwd)
  cd ${providerBuildPath}

  if [[ ! -z ${test_name} ]]; then
    test_args="TESTARGS='-run=${test_name}'"
  fi

  make testacc spotinst ${test_args}

  echo -e "
Executed acceptance tests on latest spotinst-terraform-provider:
  Build Source..: ${providerBuildPath}
  Test Name.....: ${test_name}
"

  cd ${cur}
}

##############################################
#                   DOCKER
##############################################
docker_remove_dangling_intermediate_images() {
  #  local danglingImages=$(docker images | grep "<none>" | awk {'print $3'})
  local danglingImages=$(docker images -f "dangling=true" -q)
  if [[ ! -z "${danglingImages}" ]]; then
    echo "Removing dangling intermediate <none> images..."
    docker rmi -f ${danglingImages}
  fi
}

docker_remove_stopped_containers() {
  docker container prune -f
}
