#!/bin/bash

# Bash wrappers for docker run commands
# Functions must contain the same directory name as on dockerfiles repository

export DOCKER_REPO_PREFIX=zachi

grafana() {
  docker run -t -d \
         -e GF_SECURITY_ADMIN_PASSWORD=${GENERIC_PASSWORD} \
         -v "${HOME}/.grafana/data:/var/lib/grafana" \
         -p 3000:3000 \
         --name=${DOCKER_REPO_PREFIX}-grafana \
         ${DOCKER_REPO_PREFIX}/grafana \
         "$@"
}

# On mac the user UID/GID must be same one that mounted the data folder
# From mac terminal get the UID by typing `id`
#
postgresql() {
  docker run -t -d \
         -e POSTGRES_USER=${GENERIC_USERNAME} \
         -e POSTGRES_PASSWORD=${GENERIC_PASSWORD} \
         -v "${HOME}/.postgresql/data:/var/lib/postgresql/data" \
         --network=postgres-network \
         --hostname=postgresql \
         -p ${POSTGRES_PORT}:5432 \
         --name=${DOCKER_REPO_PREFIX}-postgresql \
         --user "$(id -u):$(id -g)" \
         ${DOCKER_REPO_PREFIX}/postgresql "$@" \
         -c "postgresql.conf=/etc/postgresql/postgresql.conf"
}

# To allow docker-to-docker communication we must:
#   - Create a network: docker network create postgres-network
#   - Check the network docker members: docker network inspect postgres-network
#   - Communicate via the full docker name (not host localhost)
#

#-e PW2_ADHOC_CONN_STR="postgresql://${GENERIC_USERNAME}:${GENERIC_PASSWORD}@${DOCKER_REPO_PREFIX}-postgresql:5432" \

pgwatch2() {
  docker run -t -d \
         -e PW2_ADHOC_CONN_STR="postgresql://pgwatch2:secret@${DOCKER_REPO_PREFIX}-postgresql:5432" \
         -e PW2_ADHOC_CONFIG=exhaustive \
         -e PW2_ADHOC_CREATE_HELPERS=true \
         -v "${HOME}/.pgwatch2/influx:/var/lib/influxdb" \
         -v "${HOME}/.pgwatch2/grafana:/var/lib/grafana" \
         -v "${HOME}/.pgwatch2/pw2:/pgwatch2/persistent-config" \
         -p ${PGWATCH2_GRAFANA_PORT}:3000 \
         -p ${PGWATCH2_ADMIN_PORT}:8080 \
         --network=postgres-network \
         --name=${DOCKER_REPO_PREFIX}-pgwatch2 \
         ${DOCKER_REPO_PREFIX}/pgwatch2 "$@"
}

# Mount shared memory to the host machine on Linux based instances
#         -v /dev/shm:/dev/shm \
#
# Check shared memory on instance: df -k | grep shm
#
automation() {
  docker run --privileged -t -d --shm-size 8G \
         -e EXEC_CMD="runInParallel -PparallelCount=5 -PconfigFile=./src/dist/config/stg.yml -PfeaturesPath=src/test/resources/features -PfeatureTags=@Staging" \
         -e REPORTS_ROOT_FOLDER="/home/jenkins/automation/reports" \
         -v "${ENVIRONMENT}/automation-reports":"/home/jenkins/automation/reports" \
         -v "${ENVIRONMENT}/automation-gradle-cache:/home/jenkins/.gradle" \
         --name=${DOCKER_REPO_PREFIX}-automation \
         ${DOCKER_REPO_PREFIX}/automation "$@"
}

centos() {
  docker run -t -d \
         --name=${DOCKER_REPO_PREFIX}-centos \
         ${DOCKER_REPO_PREFIX}/centos "$@"
}

alpine() {
  docker run -t -d \
         --name=${DOCKER_REPO_PREFIX}-alpine \
         ${DOCKER_REPO_PREFIX}/alpine "$@"
}

jenkins() {
  docker run -t -d \
         -v "${HOME}/.jenkins:/var/jenkins_home" \
         -p 49001:8080/tcp \
         --restart always \
         --name=${DOCKER_REPO_PREFIX}-jenkins \
         ${DOCKER_REPO_PREFIX}/jenkins "$@"
}

# docker network create zk-kafka
zookeeper() {
  docker run -t -d \
         -v "${HOME}/.zookeeper/data:/opt/zookeeper-3.4.13/data" \
         --network=zk-kafka \
         --hostname=zookeeper \
         -p 2181:2181/tcp \
         --restart always \
         --name=${DOCKER_REPO_PREFIX}-zookeeper \
         ${DOCKER_REPO_PREFIX}/zookeeper "$@"
}

kafka() {
  docker run -t -d \
         -v "${HOME}/.kafka/kafka-logs-kafka:/kafka/kafka-logs-kafka" \
         -v "${HOME}/.kafka/logs:/opt/kafka/logs" \
         --network=zk-kafka \
         --hostname=kafka \
         -p 9092:9092/tcp \
         --name=${DOCKER_REPO_PREFIX}-kafka \
         ${DOCKER_REPO_PREFIX}/kafka "$@"
}

artifactory() {
  docker run -t -d \
         -v "${HOME}/.artifactory:/var/opt/jfrog/artifactory" \
         -p 2000:8081/tcp \
         --restart always \
         --ulimit nofile=32000:40000 \
         --ulimit nproc=65535 \
         --name=${DOCKER_REPO_PREFIX}-artifactory \
         ${DOCKER_REPO_PREFIX}/artifactory "$@"
}